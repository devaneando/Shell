<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE language SYSTEM "language.dtd"> -->
<!--
 GtkSourceView language definition file for Nasal scripts
 (FlightGear's scripting language)
 http://plausible.org/nasal/
 http://www.flightgear.org

 Author: Andreas Gaeb, March 2010
 Copyright (C) 2010 Andreas Gaeb

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="nasal" _name="Nasal" version="2.0" _section="Scripts">
  <metadata>
<!--      <property name="mimetypes">is there any?</property>-->
    <property name="globs">*.nas</property>
    <property name="line-comment-start">#</property>
<!--      <property name="block-comment-start"></property>
      <property name="block-comment-end"></property> -->
  </metadata>

  <styles>
    <style id="comment"  _name="Comment"   map-to="def:comment"/>
    <style id="error"    _name="Error"     map-to="def:error"/>
    <style id="string"   _name="String"    map-to="def:string"/>
    <style id="char"     _name="Character" map-to="def:character"/>
    <style id="keyword"  _name="Keyword"   map-to="def:keyword"/>
    <style id="operator" _name="Operator"  map-to="def:operator"/>
    <style id="type"     _name="Data Type" map-to="def:type"/>
    <style id="member"   _name="Member"    map-to="def:constant"/>
    <style id="flightgear" _name="FlightGear specific" map-to="def:preprocessor"/>
    <style id="printf"   _name="printf Conversion" map-to="def:character"/>
    <style id="escaped-character" _name="Escaped Character" map-to="def:special-char"/>
    <style id="number"   _name="Number"    map-to="def:number"/>
    <style id="boolean"  _name="Boolean value" map-to="def:boolean"/>
  </styles>

  <definitions>
    <context id="printf" style-ref="printf" extend-parent="false">
      <match extended="true">
                \%\%|\%
                (?:[1-9][0-9]*\$)?      # argument
                [#0\-\ \+\'I]*          # flags
                (?:[1-9][0-9]*|\*)?     # width
                (?:\.\-?(?:[0-9]+|\*))? # precision
                (?:hh|ll|[hlLqjzt])?    # length modifier
                [diouxXeEfFgGaAcsCSpnm] # conversion specifier
            </match>
    </context>

    <define-regex id="escaped-character" extended="true">
            \\(                   # leading backslash
            [\\\"\'nrbtfav\?] |   # escaped character
            [0-7]{1,3} |          # one, two, or three octal digits
            x[0-9A-Fa-f]+         # 'x' followed by hex digits
            )
        </define-regex>

    <context id="comment" style-ref="comment" end-at-line-end="true">
      <start>#</start>
      <include>
        <context ref="def:in-line-comment"/>
      </include>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="printf"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <context id="float" style-ref="number">
      <match extended="true">
                        (?&lt;![\w\.])
                        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
                         ([0-9]+[Ee][+-]?[0-9]*))
                        [fFlL]?
                        (?![\w\.])
                    </match>
    </context>

    <context id="hexadecimal" style-ref="number">
      <match extended="true">
                        (?&lt;![\w\.])
                        0[xX][a-fA-F0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
    </context>

    <context id="decimal" style-ref="number">
      <match extended="true">
                        (?&lt;![\w\.])
                        [0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>func|return|var|if|elsif|else|while|for(each|index)?</keyword>
      <keyword>break|continue|me|arg|parents|nil|and|or</keyword>
    </context>

    <context id="operators" style-ref="operator">
      <match extended="true">[-+=!{}\(\)\[\]\.~:]</match>
    </context>

    <context id="types" style-ref="type">
      <keyword>append|bind|call(er)?|chr|closure|cmp|compile|die|delete|find</keyword>
      <keyword>keys|int|num|pop|rand|(set)?size|split|sprintf</keyword>
      <keyword>streq|sub(str|vec)|typeof</keyword>
    </context>

    <context id="members" style-ref="member">
      <match>\s*[A-Za-z][A-Za-z0-9_]*:</match>
    </context>


    <context id="boolean" style-ref="boolean">
      <keyword>true|false</keyword>
    </context>

    <context id="functions" style-ref="type">
      <keyword>math\.(sin|cos|exp|ln|sqrt|atan2|e|pi)</keyword>
      <keyword>io\.(close|read|write|seek|tell|open|readln|stat)</keyword>
      <keyword>io\.(SEEK_SET|SEEK_CUR|SEEK_END|stdin|stdout|stderr)</keyword>
      <keyword>bits\.(sfld|fld|setfld|buf)</keyword>
    </context>

    <context id="flightgear" style-ref="flightgear">
      <keyword>abs|_?cmdarg|defined|directory|[gs]etprop|_?fgcommand</keyword>
      <keyword>_?interpolate|isa|print(log)?|s?rand|removelistener</keyword>
      <keyword>settimer|_?setlistener</keyword>
    </context>

    <context id="fgprops" style-ref="flightgear">
      <keyword>get(Child(ren)?|Index|Name|Node|Parent|Path|Type|(Bool)?Value)</keyword>
      <keyword>removeChild(ren)?</keyword>
      <keyword>set(Int|Bool|Double)?Value</keyword>
      <keyword>setValues</keyword>
      <keyword>props.(globals|Node).</keyword>
    </context>

    <context id="nasal">
      <include>
        <context ref="comment" />
        <context ref="string" />
        <context ref="printf" />
        <context ref="char" />
        <context ref="float" />
        <context ref="hexadecimal" />
        <context ref="decimal" />
        <context ref="keywords" />
        <context ref="operators" />
        <context ref="types" />
        <context ref="members" />
        <context ref="boolean" />
        <context ref="functions" />
        <context ref="flightgear" />
        <context ref="fgprops" />
      </include>
    </context>
  </definitions>
</language>
