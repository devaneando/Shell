## [How to Configure nginx for Optimized Performance](https://www.linode.com/docs/websites/nginx/configure-nginx-for-optimized-performance)
## [How To Configure Single and Multiple WordPress Site Settings with Nginx](https://www.digitalocean.com/community/tutorials/how-to-configure-single-and-multiple-wordpress-site-settings-with-nginx)
## [How To Configure The Nginx Web Server On a Virtual Private Server](https://www.digitalocean.com/community/tutorials/how-to-configure-the-nginx-web-server-on-a-virtual-private-server)
## [Apache vs Nginx: Practical Considerations](https://www.digitalocean.com/community/tutorials/apache-vs-nginx-practical-considerations)
## [What is nginx and why might I want to use it over apache?](https://www.digitalocean.com/community/questions/what-is-nginx-and-why-might-i-want-to-use-it-over-apache)

user                                        devaneando;
pid                                         /run/nginx.pid;

## This should the number of CPUs. Check it with "grep ^processor /proc/cpuinfo | wc -l"
worker_processes                            1;

events {
    ## This is the maximum connections open by a worker process. Check it with "ulimit -n"
    worker_connections                      1024;

    ## epoll is a scalable I/O event notification mechanism to trigger on events and make sure that I/O is utilized to the best of its ability.
    ## multi_accept allows to accept all new connections at one time
    use                                     epoll;
    multi_accept                            on;
}

http {

    ## - keepalive_timeout and keepalive_requests control the keep alive settings.
    ## - sendfile optimizes serving static files from the file system, like logos.
    ## - tcp_nodelay allows nginx to make TCP send multiple buffers as individual packets.
    ## - tcp_nopush optimizes the amount of data sent down the wire at once by activating the TCP_CORK option within the TCP stack.
    ## - TCP_CORK blocks the data until the packet reaches the MSS, which is equal to the MTU minus the 40 or 60 bytes of the IP header.

    keepalive_timeout                       65;
    types_hash_max_size                     2048;
    sendfile                                on;
    tcp_nodelay                             on;
    tcp_nopush                              on;

    ## - client_body_buffer_size handles the client buffer size. Most client buffers are coming from POST method form submissions.
    ##   128k is normally a good choice for this setting.
    ## - client_max_body_size sets the max body buffer size. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large)
    ##   error is returned to the client. For reference, browsers cannot correctly display 413 errors. Setting size to 0 disables checking of client request body size.
    ## - client_header_buffer_size handles the client header size. 1k is usually a sane choice for this by default.
    ## - large_client_header_buffers shows the maximum number and size of buffers for large client headers.
    ##   4 headers with 4k buffers should be sufficient here.
    ## - output_buffers sets the number and size of the buffers used for reading a response from a disk. If possible,
    ##   the transmission of client data will be postponed until nginx has at least the set size of bytes of data to send.
    ##   The zero value disables postponing data transmission.

    client_body_buffer_size                 128k;
    client_max_body_size                    10m;
    client_header_buffer_size               1k;
    large_client_header_buffers             4 4k;
    output_buffers                          1 32k;
    postpone_output                         1460;

    ## - client_body_timeout sends directives for the time a server will wait for a body to be sent.
    ## - client_header_timeout sends directives for the time a server will wait for a header body to be sent.
    ##   These directives are responsible for the time a server will wait for a client body or client header to be sent after request.
    ##   If neither a body or header is sent, the server will issue a 408 error or Request time out.
    ## - send_timeout specifies the response timeout to the client. This timeout does not apply to the entire transfer but,
    ##   rather, only between two subsequent client-read operations. Thus, if the client has not read any data for this
    ##   amount of time, then nginx shuts down the connection.

    client_header_timeout                   3m;
    client_body_timeout                     3m;
    send_timeout                            3m;

    ## Cache control. If you aren’t deploying frequently you can safely bump up these numbers higher.

    open_file_cache                         max=1000 inactive=20s;
    open_file_cache_valid                   30s;
    open_file_cache_min_uses                5;
    open_file_cache_errors                  off;

    ## For content that is plain text, nginx can use gzip compression to serve back these assets compressed to the client.
    ## The list below is a “safe” list of compressible content types; however, you only want to enable the content types
    ## that you are utilizing within your web application.

    gzip                                    on;
    gzip_min_length                         1000;
    gzip_types                              text/html application/x-javascript text/css application/javascript text/javascript text/plain text/xml application/json application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/xml font/eot font/opentype font/otf image/svg+xml image/vnd.microsoft.icon;
    gzip_disable                            "MSIE [1-6]\.";

    ## [ debug | info | notice | warn | error | crit | alert | emerg ]
    error_log                               /var/www/logs/nginx.error.log error;

    ## http://nginx.org/en/docs/http/ngx_http_log_module.html
    log_format                              devaneando '$time_local $remote_addr [$status] [$connection_requests] $request';
    access_log                              /var/www/logs/nginx.access.log devaneando;

    ## SSL settings

    ssl_protocols                           TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers               on;

    ## Mime types
    include                                 /etc/nginx/mime.types;
    default_type                            application/octet-stream;

    ## Other settings

    include                                 /etc/nginx/conf.d/*.conf;
    include                                 /etc/Lemp/5.6/nginx/sites/*.enabled;
}

