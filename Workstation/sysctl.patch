--- /etc/sysctl.conf	2016-07-10 08:39:46.000000000 +0100
+++ /etc/sysctl.conf	2017-08-07 13:59:01.820011685 +0100
@@ -1,77 +1,70 @@
-#
-# /etc/sysctl.conf - Configuration file for setting system variables
-# See /etc/sysctl.d/ for additional system variables.
-# See sysctl.conf (5) for information.
-#
-
-#kernel.domainname = example.com
-
-# Uncomment the following to stop low-level messages on console
-#kernel.printk = 3 4 1 3
-
-##############################################################3
-# Functions previously found in netbase
-#
-
-# Uncomment the next two lines to enable Spoof protection (reverse-path filter)
-# Turn on Source Address Verification in all interfaces to
-# prevent some spoofing attacks
-#net.ipv4.conf.default.rp_filter=1
-#net.ipv4.conf.all.rp_filter=1
-
-# Uncomment the next line to enable TCP/IP SYN cookies
-# See http://lwn.net/Articles/277146/
-# Note: This may impact IPv6 TCP sessions too
-#net.ipv4.tcp_syncookies=1
-
-# Uncomment the next line to enable packet forwarding for IPv4
-#net.ipv4.ip_forward=1
-
-# Uncomment the next line to enable packet forwarding for IPv6
-#  Enabling this option disables Stateless Address Autoconfiguration
-#  based on Router Advertisements for this host
-#net.ipv6.conf.all.forwarding=1
-
-
-###################################################################
-# Additional settings - these settings can improve the network
-# security of the host and prevent against some network attacks
-# including spoofing attacks and man in the middle attacks through
-# redirection. Some network environments, however, require that these
-# settings are disabled so review and enable them as needed.
-#
-# Do not accept ICMP redirects (prevent MITM attacks)
-#net.ipv4.conf.all.accept_redirects = 0
-#net.ipv6.conf.all.accept_redirects = 0
-# _or_
-# Accept ICMP redirects only for gateways listed in our default
-# gateway list (enabled by default)
-# net.ipv4.conf.all.secure_redirects = 1
-#
-# Do not send ICMP redirects (we are not a router)
-#net.ipv4.conf.all.send_redirects = 0
-#
-# Do not accept IP source route packets (we are not a router)
-#net.ipv4.conf.all.accept_source_route = 0
-#net.ipv6.conf.all.accept_source_route = 0
-#
-# Log Martian Packets
-#net.ipv4.conf.all.log_martians = 1
-#
-
-###################################################################
-# Magic system request Key
-# 0=disable, 1=enable all
-# Debian kernels have this set to 0 (disable the key)
-# See https://www.kernel.org/doc/Documentation/sysrq.txt
-# for what other values do
-#kernel.sysrq=1
-
-###################################################################
-# Protected links
-#
-# Protects against creating or following links under certain conditions
-# Debian kernels have both set to 1 (restricted)
-# See https://www.kernel.org/doc/Documentation/sysctl/fs.txt
-#fs.protected_hardlinks=0
-#fs.protected_symlinks=0
+## [Improved default settings for Linux machines](https://tobert.github.io/post/2014-06-24-linux-defaults.html)
+## [How to Configure nginx for Optimized Performance](https://www.linode.com/docs/websites/nginx/configure-nginx-for-optimized-performance)
+
+# IPv6 disabled
+net.ipv6.conf.all.disable_ipv6              = 1
+net.ipv6.conf.default.disable_ipv6          = 1
+net.ipv6.conf.lo.disable_ipv6               = 1
+
+# Tell the kernel to only swap if it really needs it
+vm.swappiness                               = 10
+
+# Increase the number of allowed mmapped files
+vm.max_map_count                            = 1048576
+
+# Increase the number of file handles available globally
+fs.file-max                                 = 1048576
+
+# Allow up to 999999 processes with corresponding pids
+# this looks nice and rarely rolls over - I've never had a problem with it.
+kernel.pid_max                              = 999999
+
+# Seconds to delay after a kernel panic and before rebooting automatically
+kernel.panic                                = 300
+
+# Do not enable if your machines are not physically secured
+# this can be used to force reboots, kill processses, cause kernel crashes, etc without logging in
+# but it's very handy when a machine is hung and you need to get control
+# that said, I always enable it
+kernel.sysrq                                = 1
+
+# The TCP FIN timeout belays the amount of time a port must be inactive before it can reused for another connection.
+# The default is often 60 seconds, but can normally be safely reduced to 30 or even 15 seconds:
+net.ipv4.tcp_fin_timeout                    = 15
+
+# Updating the net.core.somaxconn and net.ipv4.tcp_max_tw_buckets changes the size of the queue for connections waiting
+# for acceptance by nginx. If there are error messages in the kernel log, increase the value until errors stop.
+net.core.somaxconn                          = 65536
+net.ipv4.tcp_max_tw_buckets                 = 1440000
+
+# Packets can be buffered in the network card before being handed to the CPU by setting the max backlog with the
+# net.core.netdev_max_backlog tag.
+
+# This TCP option, along with several others, is defined in IETF RFC 1323 which deals with long fat networks.
+# It can be defined with the net.ipv4.tcp_window_scaling = 1 tag.
+net.ipv4.tcp_window_scaling                 = 1
+
+# The net.ipv4.tcp_max_syn_backlog determines a number of packets to keep in the backlog before the kernel starts
+# dropping them. A sane value is net.ipv4.tcp_max_syn_backlog = 3240000
+net.ipv4.tcp_max_syn_backlog                = 3240000
+
+# The IPv4 local port range defines a port range value.
+net.ipv4.ip_local_port_range                = 1024 65000
+
+# I recommend Googling "Linux C10k" to learn more about what they mean.
+net.ipv4.tcp_rmem                           = 4096 87380 16777216
+net.ipv4.tcp_wmem                           = 4096 65536 16777216
+net.core.rmem_max                           = 16777216
+net.core.wmem_max                           = 16777216
+
+# these will need local tuning, currently set to start flushing dirty pages at 256MB
+# writes will start blocking at 2GB of dirty data, but this should only ever happen if
+# your disks are far slower than your software is writing data
+# If you have an older kernel, you will need to s/bytes/ratio/ and adjust accordingly.
+vm.dirty_background_bytes                   = 268435456
+vm.dirty_bytes                              = 1073741824
+
+# increase the sysv ipc limits
+kernel.shmmax                               = 33554432
+kernel.msgmax                               = 33554432
+kernel.msgmnb                               = 33554432
